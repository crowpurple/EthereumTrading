enclave{
	enum action{ DROP, ALLOW }; 
	enum fw_state{ CLOSE, SYN_1, SYN_2, ESTABLISHED, FIN_1, FIN_2, CLOSING_WAIT, LAST_ACK };
	struct entry{
    		unsigned int src_ip;
    		unsigned int src_ip_mask;
    		unsigned int des_ip;
    		unsigned int des_ip_mask;
    		uint16_t src_port_min;
    		uint16_t src_port_max;
    		uint16_t des_port_min;
    		uint16_t des_port_max;
    		unsigned char protocol;
    		enum action action;   
    		uint16_t seq;
    		struct entry* pre;
    		struct entry* next; 
    		struct entry* delete_pre;
    		struct entry* delete_next;
    		struct entry* append_pre;
    		struct entry* append_next;  
    		struct state_entry* connection;
    		uint32_t active_time;
    		uint8_t d_a;
	};
	struct ipchain{
    		int size;
    		struct entry* head;
    		struct entry* tail;
    		struct entry* _delete_;
    		struct entry* _append_;
    		uint32_t _delete_size_;
   		uint32_t _append_size_;
		uint32_t delete_refs;
    		uint16_t delete_seq;
	};	
	struct state_entry {
	    uint32_t src_ip;
	    uint32_t dst_ip;
	    uint16_t src_port;
	    uint16_t dst_port;
	    uint8_t protocol;
	    enum fw_state state;
	    uint32_t life_time;	    
	    uint32_t syn1_ack; 
	    uint32_t syn2_ack;  
	    uint32_t fin1_ack; 
	    uint32_t fin2_ack;
	    struct state_entry* sib_pre;
	    struct state_entry* sib_next;
	    struct state_entry* store_pre;
	    struct state_entry* store_next;
	    struct state_entry* delete_pre;
	    struct state_entry* delete_next;
	    struct state_entry* suspend_pre;
	    struct state_entry* suspend_next;
	    struct entry* rule;
	    uint16_t seq;
	    uint8_t active;
	};
	trusted{
		public int firewallstate_t();
		public int _firewallstate_t();
		public int fs_add_state_to_delete_t([in,out,size=104] entry* e);	
		public int fs_update_state_by_tag_t([in,out,size=120] state_entry* e);
		public struct state_entry* fs_pop_from_deleted_state_t();
		public int fs_flush_timers_t();
		public int fs_update_state_t(uint8_t mask,uint8_t th_flags, uint32_t th_seq, uint32_t th_ack);
		public int fs_add_entry_t([in,out,size=104] entry* e, [in,out,size=104] entry* rule, uint8_t mask,uint8_t th_flags, uint32_t th_seq, uint32_t th_ack);
		public int fs_delete_entry_t([in,out,size=120] state_entry* s);
		public int fs_clear_states_t();
		public struct state_entry* fs_check_entry_t(uint32_t src_ip,uint32_t dst_ip,uint16_t src_port,uint16_t dst_port);
		public int fs_suspend_state_t([in,out,size=120] state_entry* s);
		public int fs_attach_suspend_states_t([in,out,size=104] entry* e);
		public int fs_attach_state_t([in,out,size=104] entry* e,[in,out,size=120] state_entry* s);
	};
	untrusted{
	};
};
